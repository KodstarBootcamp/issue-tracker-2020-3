openapi: 3.0.1
info:
  title: Issue Tracker API
  description: This is the API for issue tracker
  contact:
    email: kodstar.bootcamp@gmail.com
  license:
    name: MIT
    url: https://github.com/KodstarBootcamp/issue-tracker-2020-1/blob/main/LICENSE
  version: 1.0.2
paths:
  /issue/{issueId}:
    get:
      tags:
      - Issue
      summary: Get issue
      description: Gets an issue by ID
      operationId: getIssueById
      parameters:
      - name: issueId
        in: path
        description: ID of issue to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        400:
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400-1'
        404:
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404-1'
    put:
      tags:
      - Issue
      summary: Update issue
      description: Update an existing issue
      operationId: updateIssue
      parameters:
      - name: issueId
        in: path
        description: ID of issue to return
        required: true
        schema:
          type: string
      requestBody:
        description: Issue object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIssue'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        400:
          description: Invalid ID or Validation error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/400-2'
                  - $ref: '#/components/schemas/400-1'
        401:
          description: Invalid token
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        404:
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404-1'
      x-codegen-request-body-name: issue
    delete:
      tags:
      - Issue
      summary: Delete issue
      description: Deletes an existing issue
      operationId: deleteIssue
      parameters:
      - name: issueId
        in: path
        description: ID of issue to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        400:
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400-1'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        404:
          description: Issue not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404-1'
  /issue:
    post:
      tags:
      - Issue
      summary: Create issue
      description: Creates a new issue
      operationId: createIssue
      requestBody:
        description: issue to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIssue'
        required: false
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        400:
          description: invalid input, object invalid
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/400-2'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        409:
          description: an existing issue already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409-1'
      x-codegen-request-body-name: issue
  /issue/all:
    get:
      tags:
      - Issue
      summary: Get all issues
      description: Gets all existing issues with optional queries
      operationId: getIssues
      parameters:
      - name: start
        in: query
        description: start index value to get issues
        schema:
          type: integer
          default: 0
      - name: count
        in: query
        description: defines how many issues to get.
        schema:
          type: integer
          default: 10
      - name: sort
        in: query
        description: sort types createdAt, updatedAt, title. for descending sort -createdAt, -...
          
        schema:
          type: string
          enum:
          - cratedAt
          - updatedAt
          - title
          - -cratedAt
          - -updatedAt
          - -title
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
  /issue/count:
    get:
      tags:
      - Issue
      summary: Get Count of all issue objects
      description: Gets count of all existing issues
      operationId: getIssuesCount
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: number
                    example: 5.0
  /label:
    post:
      tags:
      - Label
      summary: Create Label
      description: Creates a new Label
      operationId: createLabel
      requestBody:
        description: Label to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLabel'
        required: false
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        400:
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400-2'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        409:
          description: Label already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409-2'
      x-codegen-request-body-name: Label
  /label/{labelId}:
    put:
      tags:
      - Label
      summary: Update Label
      description: Update an existing label
      operationId: updateLabel
      parameters:
      - name: labelId
        in: path
        description: ID of label to update
        required: true
        schema:
          type: string
      requestBody:
        description: Label object that needs to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLabel'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Label'
        400:
          description: Invalid ID or Validation Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/400-2'
                  - $ref: '#/components/schemas/400-1'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        404:
          description: Label not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404-2'
      x-codegen-request-body-name: Label
    delete:
      tags:
      - Label
      summary: Delete Label
      description: Deletes an existing Label
      operationId: deleteLabel
      parameters:
      - name: labelId
        in: path
        description: ID of Label to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        400:
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400-1'
        401:
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-1'
        404:
          description: Label not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404-2'
  /label/all:
    get:
      tags:
      - Label
      summary: Get all labels
      description: Gets all existing labels
      operationId: getAllLabels
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Label'
  /users:
    post:
      tags:
      - User
      summary: Register
      description: Register an user
      operationId: register
      requestBody:
        description: user to register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: false
      responses:
        201:
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: username/password missing or invalid password
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/400-3'
                  - $ref: '#/components/schemas/400-4'
      x-codegen-request-body-name: register
  /login:
    post:
      tags:
      - Login
      summary: Login
      description: Authenticate an user
      operationId: login
      requestBody:
        description: user to login
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: testuser
                password:
                  type: string
                  example: ap!!DF.65rd
        required: false
      responses:
        200:
          description: successfull operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: ey5gf....
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401-2'
      x-codegen-request-body-name: login

components:
  schemas:
    NewIssue:
      required:
      - title
      type: object
      properties:
        title:
          maxLength: 250
          type: string
          example: An issue title
        description:
          maxLength: 1500
          type: string
          example: A lengthy description
        labels:
          type: array
          description: List of labels
          example:
          - text: todo
            color: '#fff'
          - text: story
            color: '#000'
            id: 5f..ba5
          items:
            $ref: '#/components/schemas/NewLabel'
    Issue:
      allOf:
      - type: object
        properties:
          createDate:
            type: string
            format: ISO
            example: 2011-10-05T14:48:00.000Z
          updateDate:
            type: string
            format: ISO
            example: 2011-10-05T14:48:00.000Z
          id:
            type: string
            example: 5fe481516234264fba
      - $ref: '#/components/schemas/NewIssue'
    NewLabel:
      required:
      - text
      type: object
      properties:
        text:
          type: string
          example: backend
        color:
          type: string
          example: '#fff'
    Label:
      allOf:
      - type: object
        properties:
          id:
            type: string
            example: 5fe481516234264fba
      - $ref: '#/components/schemas/NewLabel'
    NewUser:
      required:
      - email
      - username
      type: object
      properties:
        username:
          type: string
          example: testuser
        email:
          type: string
          example: example@examlemail.exp
        password:
          type: string
          example: ap!!DF.65rd
    User:
      type: object
      properties:
        username:
          type: string
          example: testuser
        email:
          type: string
          example: example@examlemail.exp
        id:
          type: string
          example: 5fe481516234264fba
    '200':
      type: object
      properties:
        OK:
          type: string
          example: successfull operation
    '400-1':
      type: object
      properties:
        error:
          type: string
          example: Invalid ID supplied
    '400-2':
      type: object
      properties:
        error:
          type: string
          example: Validation exception
    '400-3':
      type: object
      properties:
        error:
          type: string
          example: password or username missing
    '400-4':
      type: object
      properties:
        error:
          type: string
          example: password should be at 3 characters long
    '401-1':
      type: object
      properties:
        error:
          type: string
          example: Invalid token
    '401-2':
      type: object
      properties:
        error:
          type: string
          example: invalid username or password
    '404-1':
      type: object
      properties:
        error:
          type: string
          example: issue not found
    '404-2':
      type: object
      properties:
        error:
          type: string
          example: label not found
    '409-1':
      type: object
      properties:
        error:
          type: string
          example: 'Issue already exist. Dup value: {VALUE}'
    '409-2':
      type: object
      properties:
        error:
          type: string
          example: 'Label already exist. Dup value: {VALUE}'
    '409-3':
      type: object
      properties:
        error:
          type: string
          example: 'Username or email already exist. Dup value: {VALUE}'
